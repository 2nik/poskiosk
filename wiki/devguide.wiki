#summary Описание среды разработки приложений POS Kiosk
<h1><a name="Index"></a>Содержание</h1>
<p><a href="#Contents">Состав пакета</a></p>
<p><a href="#Prepare">Подготовка среды разработки</a></p>
<p><a href="#FrontArch">Архитектура Front-end</a></p>
<p><a href="#BankArch">Архитектура Back-end</a></p>
<h1><a name="Contents"></a>Состав пакета</h1>
<p>Пакет состоит из следующих проектов:<p>
<ul>
<li><b>poskiosk</b> – Приложение J2EE запускаемое в Tomcat или GlassFish. Содержит программы управления киоском на JavaScript и сервис мониторинга и осуществления платежей.</li>
<li><b>jposapplet</b> – Java applet, предоставляющий доступ к запуски JavaPOS драйверов из JavaScript</li>
<li><b>simulatorjpos</b> – Набор сервисов-симуляторов различных устройств</li>
</ul>
<h1><a name="Prepare">Подготовка среды разработки</h1>
<p>На компьютере должны быть установлены JDK 1.7.0, NetBeans 7.2+ и среда выполнения Tomcat или GlassFish. Отладку можно в браузере, который будет использован на киоске.</p>
<p>Далее в описании будут использованы следующие пути </p>
<ul>
<li><b><i>%jdk7%</i></b> - путь до установленной на компьютере JDK, например <i>C:\Program Files\Java\jdk1.7.0_17</i>. JDK используется в процессе компиляции приложения и для отладки Tomcat.</li>
<li><b><i>%jre7%</i></b> - путь до Java Runtime, например <i>C:\Program Files\Java\jre7.</i> Обычно он установлен отдельно и используется браузерами для запуска Java applet'ов.</li>
<li><b><i>%home%</i></b> - корневой каталог браузера, например <i>C:\Program Files\Google\Chrome\Application\26.0.1410.43</i> для Google Chrome или <i>C:\Program  Files\Internet Explorer\ для Internet Explorer.</i></li>
</ul>
<p>На первом этапе на компьютер копируется содержимое пакета.</p>
<ol>
<li>Скопировать все проекты пакета в домашний каталог NetBeansProjects.</li>
<li>Скопировать из каталога <i>poskiosk\lib</i> файл <b>jpos113-controls.jar</b> в каталог <i><b>%jdk7%</b>\jre\lib\ext</i>.</li>
<li>Скопировать из каталога <i>poskiosk\lib</i> файлы <b>jpos113.jar</b>, <b>xercesImpl.jar</b>, <b>xml-apis.jar</b> в каталог <i><b>%jre7%</b>\lib\ext</i>.</li>
<li>Собрать проект <b>simulatorjpos</b> и скопировать полученный jar-файл из каталога <i>simulatorjpos\dist</i> в каталог <i><b>%jre7%</b>\lib\ext</i>.</li>
<li>По аналогии собрать и скопировать в <i><b>%jre7%</b>\lib\ext</i> JavaPOS драйвера других используемых устройстройств.</li>
<li>Скопировать из каталога <i>lib</i> файлы <b>jpos.properties</b> и <b>jpos.xml</b> в каталог <i><b>%home%</b></i>.
Установить в <b>jpos.properties</b> необходимый уровень логирования.
Начальные настройки <b>jpos.xml</b> описывают симуляторы сервисов JavaPOS из пакета <b>simulatorjpos</b>, для реальных устройств их необходимо изменить. 
</li>
</ol>
<p>Теперь необходимо выполнить настройку среды выполнения Java-апплета JposApplet.<p>
<ol>
<li>Создать свой комплект ключей для подписи приложения <b>jposapplet</b>, выполнив команду <code>%jdk7%\bin\keytool –genkeypair –keystore jposapplet\jpos.keystore –alias poskiosk –storepass password –keypass password</code>Для первого знакомства этот шаг можно пропустить и использовать уже имеющийся ключ <b>jposapplet\jpos.keystore</b>, но строго рекомендую вернуться к этому шагу перед публикацией приложения в промышленную эксплуатацию.</li>
<li>Экспортировать сертификат ключа командой <code>%jdk7%\bin\keytool –exportcert –keystore jposapplet\jpos.keystore –alias poskiosk –storepass password –keypass password –file jposapplet\poskiosk.crt</code></li>
<li>Импортировать полученный сертификат <b>jposapplet\poskiosk.crt</b> в хранилище доверенных корневых центров сертификации, которые использует браузер.</li>
<li>Импортировать полученный сертификат <b>jposapplet\poskiosk.crt</b> в хранилище доверенных корневых сертификатов Java Runtime. Для этого используйте команду <code>%jdk%\bin\keytool -importcert -keystore %jre%\lib\security\cacerts -file jposapplet\poskiosk.crt -storepass changeit -alias poskiosk</code> Замечание: команда должна исполняться от имени администратора.</li>
<li>Добавить в файл java.policy следующие строки:
<code>
keystore "cacerts", "jks";
grant {
  permission java.util.PropertyPermission "*", "read, write", signedBy "poskiosk";
  permission java.io.FilePermission "<<ALL FILES>>", "read", signedBy "poskiosk";
  permission java.net.SocketPermission "[0:0:0:0:0:0:0:1]:*", "accept, resolve", signedBy "poskiosk";
  permission java.lang.RuntimePermission "modifyThreadGroup", signedBy "poskiosk";
  permission java.lang.RuntimePermission "modifyThread", signedBy "poskiosk";
};
</code>
Или просто скопировать из каталога <i>lib</i> файл <b>java.policy</b> в каталог <i><b>%jre7%</b>\lib\security</i>.</li>
<li>Собрать проект <b>jposapplet</b>, проверить успешную установку подписи от имени poskiosk и скопировать полученный jar-файл из каталога <i>jposapplet\dist</i> в каталог <i>poskiosk\web\applet</i>.</li>
<li>Обновить в свойства проекта <b>poskiosk</b> информацию об используемом J2EE сервере Tomcat, GlassFish или Google AppEngine.</li>
</ol>
<p>Теперь все готово для сборки и запуска проекта poskiosk.<p>
<h1><a name="FrontArch">Архитектура Front-end</h1>
На рисунке ниже основные строительные блоки клиентского приложения киоска. 
<ul>
<li><font color="magenta"><b>Сиреневым</b></font> цветом выделены Java-библиотеки.</li>
<li><font color="blue"><b>Синим</b></font> – программы на JavaScript.</li>
<li><font color="green"><b>Зеленым</b></font> – визуальные элементы файлы HTML, CSS и графические изображения.</li>
</ul>
<p><img src="https://poskiosk.googlecode.com/svn/wiki/devguide-front-end.png"/></p>
<p>Большинство элементов загружается на терминал по сети и расположены в каталоге <i>poskiosk\web</i>. Исключение с целью оптимизации начальной загрузки могут составлять Java библиотеки и драйвера. Элементы архитектуры подробно описаны ниже.</p>
<h2>Расположение модулей</h2>
<table>
<tr><th><i>Модуль</i></th><th><i>Расположение</i></th><th><i>Описание</i></th></tr>
<tr><td><b>Start page</b></td><td><i>index.jsp</i></td><td>Стартовая страница, загрузка main.js</td></tr>
<tr><td><b>Main loader</b></td><td><i>scripts/main.js</i></td><td>Настройка приложения</td></tr>
<tr><td><b>Script libraries</b></td><td><i>scripts/lib/-</i></td><td>Используемые JavaScript-библиотеки</td></tr> 
<tr><td><b>Application</b></td><td><i>scripts/app.js</i></td><td>Общие переменные и события приложения</td></tr>
<tr><td><b>Routers</b></td><td><i>scripts/routers/-</i></td><td>Контроллеры состояний приложения</td></tr>
<tr><td><b>Devices</b></td><td><i>scripts/devices/-</i></td><td>Контроллеры устройств киоска</td></tr>
<tr><td><b>Models</b></td><td><i>scripts/models/-</i></td><td>Модели и коллекции данных приложения</td></tr>
<tr><td><b>Views</b></td><td><i>scripts/views/-</i></td><td>Представления для отображения на экране</td></tr>
<tr><td><b>Locales</b></td><td><i>scripts/nls/-</i></td><td>Многоязыковые и национальные формы</td></tr>
<tr><td><b>JavaPOS Applet</b></td><td><i>appet/jposapplet.jar</i></td><td>Аппрет представления JavaPOS в JavaScript</td></tr>
<tr><td><b>JavaPOS library</b></td><td><i><b>%jre7%</b>/lib/ext/-</i></td><td>Связь контроллеров с драйверами JavaPOS</td></tr>
<tr><td><b>Device drivers</b></td><td><i><b>%jre7%</b>/lib/ext/-</i></td><td>Java-драйвера устройств киоска</td></tr>
<tr><td><b>Template</b></td><td><i>templates</i></td><td>HTML шаблоны экранных форм</td></tr>
<tr><td><b>Styles</b></td><td><i>styles</i></td><td>CSS стили экранных форм</td></tr>
<tr><td><b>Images</b></td><td><i>images</i></td><td>Графические изображения</td></tr>
</table>
<h2>Main loader</h2>
<p>Загружается на начальной странице <b>index.jsp</b></p>
Определяет и настраивает пути проекта, локализацию, используемые библиотеки <b>Require</b>, <b>JQuery</b>, <b>Underscore</b>, <b>Backbone</b>, вызывает и инициализирует <b>Application</b> и <b>Routers</b>.</p>
<p>Системные библиотеки:<p>
<ul>
<li><b>Require.js</b> – динамическая загрузка пакетов JavaScript, HTML-шаблонов и Java-апплетов. Последняя версия и описание здесь: <a href="http://requirejs.org/">requirejs.org</a>. На русском языке <a href="http://requirejs.ru/">requirejs.ru</a>.</li>
<li><b>JQuery</b> – AJAX-библиотека, управление DOM-моделью. Сайт библиотеки <a href="http://jquery.com/">jquery.com</a>.</li>
<li><b>Underscore.js</b> – инструментарий объектной разработки JavaScript. Последняя версия и описание <a href="http://underscorejs.org/">underscorejs.org</a>. На русском языке <a href="http://underscorejs.ru/">underscorejs.ru</a>.</li>
<li><b>Backbone.js</b> – прототипы структурных объектов <b>Router</b>, <b>View</b>, <b>Model</b>. Последняя версия и описание <a href="http://backbonejs.org/">backbonejs.org</a>. На русском языке <a href="http://backbonejs.ru/">backbonejs.ru</a>.</li>
</ul>
<p>Корневые модули:</p>
<ul>
<li>Application – глобальные значения, на которые ссылаются все другие модули</li>
<li>Routers – контроллеры состояний приложения, которые загружают все другие модули</li>
</ul>
<h2>Application</h2>
<p>Загружается в модуле <b>Main</b>.</p>
<p>Не ссылается ни на какие другие модули, наоборот все модули приложения содержат ссылки на <b>Application</b> и поэтому этот объект служит для хранения глобальных для приложения значений, например, ссылки на роутеры, главный экран, заголовки и подвалы страниц.</p>
<p>Модуль <b>Application</b> инициирует для всех модулей глобальные события при старте и остановке приложения, а также события смены главной страницы.</p>
<h2>Routers</h2>
<p>Загружается в модуле <b>Main</b>.</p>
<p>Контроллеры состояний приложения загружают и настраивают представления приложения <b>Views</b>, связывают формы с моделями данных Models, контроллеры устройств <b>Devices</b>. Контроллеров может быть несколько. Цель такого разделения – сохранить небольшой объем для каждого контроллера и позволить параллельно разрабатывать разные логические блоки приложения.</p>
<p>Каждый контроллер содержит таблицу состояний приложения. Например,</p>
<code>
routes: {
  ‘start’: ‘start’,
  ‘group/:id/:page’: ‘group’,
  ‘payment/:id/:step: ‘payment’
}
</code>
<p>Таблица отражает соответствие идентификатора состояния (закладка главной страницы, часть url-адреса после символа ‘#’) и функции создания соответствующей формы экрана. Идентификаторы могут содержать переменные составляющие, которые передаются в функцию в качестве параметров.</p>
<p>Разработка ведется таким образом, чтобы приложение при старте корректно открывало любой главный экран по идентификатору состояния. При необходимости последовательность состояний определяется кнопками перехода на форме и полнотой заполнения данных модели, используемой на форме.</p>
<p>Каждый модуль возвращает созданный объект наследника класса <b>Backbone.Router</b>.</p>
<h2>Devices</h2>
<p>Загружаются в контроллерах состояния приложений <b>Routers</b>.</p> 
<p>Используют <b>JavaPOS Applet</b> для создания контроллеров устройств киоска. Настраивает состояние устройства по событиям старта и остановки приложения <b>Application</b>. По события от устройств изменяют состояние приложения, вызывая переход на другой экран, и данные модели <b>Models</b>.</p>
<p>Каждый модуль возвращает созданный Java-объект контроллер для соответствующего устройства. Например, <b>jpos.applet.BillAcceptor</b> или <b>jpos.applet.POSPrinter</b>.</p>
<h2>JavaPOS Applet</h2>
<p>Апплет загружается при старте приложения и служит прослойкой между JavaPOS-библиотекой и JavaScript. Классы апплета дополняют контроллеры устройств методами, позволяющими вызывать их напрямую из JavaScript.</p> 
<p>Учитываются следующие аспекты такой передачи:</p>
<ol>
<li>Возврат массивов переменных. LiveConnect корректно транслирует массивы JavaScript в Java, но не поддерживает обратную трансляцию. Апплет исправляет этот недостаток, переопределяя функции возвращающие значения в массивах.</li>
<li>Передача событий. Для обработки событий в Java используются объекты созданные по заданному интерфейсу. Апплет содержит классы, реализующие все интерфейсы событий JavaPOS и связывающие их непосредственно с вызовом функций JavaScript.</li>
</ol>
<h2>JavaPOS library</h2>
<p>Библиотека поддержки стандарта драйверов для POS устройств. Сайт проекта <a href="http://javapos.com/">javapos.com</a>. Описание стандарта можно загрузить здесь <a href="http://www.nrf-arts.org/content/unifiedpos">www.nrf-arts.org/content/unifiedpos</a>. На момент написания документа в марте 2003 года вышла версия 1.14 стандарта.</p>
<p>В разработке и поддержке стандарта JavaPOS участвуют производители POS оборудования и программного обеспечения: JCPenny, Sears, Home Depot, NCR, IBM, Sun Microsystems, Epson, Wincor Nixdorf, Fujitsu, Datafit, MGV, Ultimate Technology, RCS, Triversity, 360Commerce, Star Micronics, BearingPoint и TPG.</p>
<h2>Device drivers</h2>
<p>Часть драйверов JavaPOS устройств киосков было загружено с сайтов производителей. Драйвера устройств, производители которых не поддерживают стандарт JavaPOS, разработаны командой проекта.</p>
<p><i>[Добавить перечисление драйверов]</i></p>
<h2>Models</h2>
<p>Модели данных загружаются контроллерами состояний <b>Routers</b>, объектами управления устройствами <b>Devices</b>. Рекомендую избегать загрузки непосредственно из представлений <b>Views</b>. Связь моделей данных с представлениями осуществлять при их создании в контроллере состояний <b>Routers</b>.</p>
<p>Модель обеспечивает взаимодействие с Back-end, используя формат объема JSON и протокол  RESTfull.</p>
<p>События изменения данных в модели могут быть инициированы на форме <b>Views</b>, по событию контроллера устройств <b>Devices</b>, при обмене с Back-end.</p>
<p>Возвращает созданный объект <b>Backbone.Collection</b>, содержащий коллекцию данных и ссылку на класс <b>Backbone.Model</b>, используемый при создании новых экземпляров данных.</p>
<h2>Views</h2>
<p>Представления загружаются контроллерами состояния приложений <b>Routers</b>. В отличие от других модулей в пакете содержится только описание класса. Контроллер состояния управляет созданием представления.</p>
<p>При создании представления передаются выбранные из коллекции или созданные экземпляры данных, элемент DOM-модели для привязки.</p>
<p>Представления <b>Views</b> используют шаблоны <b>Templates</b> для заполнения элемента DOM-модели. Дополнительно для многоязыковых форм и учета национальных форматов могут быть использованы NLS-модули.</p>
<p>Рекомендация во избежание создания «фантомных» представлений. Если используется связь с событиями изменения данных, необходимо создать для представления метод close, в котором все установленные связи должны быть удалены. Метод close должен вызываться контроллером состояний <b>Routers</b> при замене представления на экране.</p>
<p>Каждый модуль возвращает класс-наследник <b>Backbone.View</b>.<p>
<h2>Templates</h2>
<p>HTML-шаблоны загружаются представлениями <b>Views</b>. Шаблоны накладывают на HTML-текст данные формы и NLS-модули.</p>
<p>Синтаксис шаблонов описан в библиотеке <b>Underscore</b>.</p>
<h2>Styles</h2>
<p>Все файлы CSS стилей загружаются на стартовой странице, но используются только в привязке к отдельным элементам <b>Templates</b> и <b>Views</b>. Так как большинство стилей применяется на всех формах, то целесообразность организации динамической загрузки под сомнением.</p>
<h2>Images</h2>
<p>При дизайне экранов соблюдается правило, по которому графические изображения описываются только в файлах CSS стилей.</p>
<h1><a name="BackArch">Архитектура Back-end</h1>
<p><i>[Сейчас на этапе proof-of-concept. Будет описана позже]</i></p>
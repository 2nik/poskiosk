#summary Описание среды разработки приложений POS Kiosk

= Содержание =

<wiki:toc max_depth="2"/>

= Состав пакета =

Пакет состоит из следующих проектов:

  * *poskiosk* – Приложение J2EE запускаемое в Tomcat или GlassFish. Содержит программы управления киоском на JavaScript и сервис мониторинга и осуществления платежей.
  * *jposapplet* – Java applet, предоставляющий доступ к запуски JavaPOS драйверов из JavaScript
  * *simulatorjpos* – Набор сервисов-симуляторов различных устройств

= Подготовка среды разработки =

На компьютере должны быть установлены JDK 1.7.0, NetBeans 7.2+ и среда выполнения Tomcat или GlassFish. Отладку можно в браузере, который будет использован на киоске.

Далее в описании будут использованы следующие пути 

  * _*%jdk7%*_ - путь до установленной на компьютере JDK, например _C:\Program Files\Java\jdk1.7.0_17_. JDK используется в процессе компиляции приложения и для отладки Tomcat.
  * _*%jre7%*_ - путь до Java Runtime, например _C:\Program Files\Java\jre7._ Обычно он установлен отдельно и используется браузерами для запуска Java applet'ов.
  * _*%home%*_ - корневой каталог браузера, например _C:\Program Files\Google\Chrome\Application\26.0.1410.43_ для Google Chrome или _C:\Program  Files\Internet Explorer\ для Internet Explorer._

На первом этапе на компьютер копируется содержимое пакета.

  # Скопировать все проекты пакета в домашний каталог NetBeansProjects.
  # Скопировать из каталога _poskiosk\lib_ файл *jpos113-controls.jar* в каталог _*%jdk7%*\jre\lib\ext_.
  # Скопировать из каталога _poskiosk\lib_ файлы *jpos113.jar*, *xercesImpl.jar*, *xml-apis.jar* в каталог _*%jre7%*\lib\ext_.
  # Собрать проект *simulatorjpos* и скопировать полученный jar-файл из каталога _simulatorjpos\dist_ в каталог _*%jre7%*\lib\ext_.
  # По аналогии собрать и скопировать в _*%jre7%*\lib\ext_ JavaPOS драйвера других используемых устройстройств.
  # Скопировать из каталога _lib_ файлы *jpos.properties* и *jpos.xml* в каталог _*%home%*_. Установить в *jpos.properties* необходимый уровень логирования. Начальные настройки *jpos.xml* описывают симуляторы сервисов JavaPOS из пакета *simulatorjpos*, для реальных устройств их необходимо изменить. 

Теперь необходимо выполнить настройку среды выполнения Java-апплета JposApplet.

  # Создать свой комплект ключей для подписи приложения *jposapplet*, выполнив команду <code>%jdk7%\bin\keytool –genkeypair –keystore jposapplet\jpos.keystore –alias poskiosk –storepass password –keypass password</code>Для первого знакомства этот шаг можно пропустить и использовать уже имеющийся ключ *jposapplet\jpos.keystore*, но строго рекомендую вернуться к этому шагу перед публикацией приложения в промышленную эксплуатацию.
  # Экспортировать сертификат ключа командой <code>%jdk7%\bin\keytool –exportcert –keystore jposapplet\jpos.keystore –alias poskiosk –storepass password –keypass password –file jposapplet\poskiosk.crt</code>
  # Импортировать полученный сертификат *jposapplet\poskiosk.crt* в хранилище доверенных корневых центров сертификации, которые использует браузер.
  # Импортировать полученный сертификат *jposapplet\poskiosk.crt* в хранилище доверенных корневых сертификатов Java Runtime. Для этого используйте команду <code>%jdk%\bin\keytool -importcert -keystore %jre%\lib\security\cacerts -file jposapplet\poskiosk.crt -storepass changeit -alias poskiosk</code> Замечание: команда должна исполняться от имени администратора.
  # Добавить в файл java.policy следующие строки: 
  <code>
  keystore "cacerts", "jks";
  grant {
    permission java.util.PropertyPermission "*", "read, write", signedBy "poskiosk";
    permission java.io.FilePermission "<<ALL FILES>>", "read", signedBy "poskiosk";
    permission java.net.SocketPermission "[0:0:0:0:0:0:0:1]:*", "accept, resolve", signedBy "poskiosk";
    permission java.lang.RuntimePermission "modifyThreadGroup", signedBy "poskiosk";
    permission java.lang.RuntimePermission "modifyThread", signedBy "poskiosk";
  }; 
  </code> 
  или просто скопировать из каталога _lib_ файл *java.policy* в каталог _*%jre7%*\lib\security_.

Настройка главного проекта *poskiosk*.

  # Собрать проект *jposapplet*, проверить успешную установку подписи от имени poskiosk и скопировать полученный jar-файл из каталога _jposapplet\dist_ в каталог _poskiosk\web\applet_.
  # Обновить в свойства проекта *poskiosk* информацию об используемом J2EE сервере Tomcat, GlassFish или Google AppEngine.

Теперь все готово для сборки и запуска проекта poskiosk.

= Архитектура Front-end =

На рисунке ниже основные строительные блоки клиентского приложения киоска. 

  # <font color="magenta">*Сиреневым*</font> цветом выделены Java-библиотеки.
  # <font color="blue">*Синим*</font> – программы на JavaScript.
  # <font color="green">*Зеленым*</font> – визуальные элементы файлы HTML, CSS и графические изображения.

https://poskiosk.googlecode.com/svn/wiki/devguide-front-end.png

Большинство элементов загружается на терминал по сети и расположены в каталоге _poskiosk\web_. Исключение с целью оптимизации начальной загрузки могут составлять Java библиотеки и драйвера. Элементы архитектуры подробно описаны ниже.

== Расположение модулей ==

||_Модуль_||_Расположение_||_Описание_||
||*Start page*||_index.jsp_||Стартовая страница, загрузка main.js||
||*Main loader*||_scripts/main.js_||Настройка приложения||
||*Script libraries*||_scripts/lib/-_||Используемые JavaScript-библиотеки|| 
||*Application*||_scripts/app.js_||Общие переменные и события приложения||
||*Routers*||_scripts/routers/-_||Контроллеры состояний приложения||
||*Devices*||_scripts/devices/-_||Контроллеры устройств киоска||
||*Models*||_scripts/models/-_||Модели и коллекции данных приложения||
||*Views*||_scripts/views/-_||Представления для отображения на экране||
||*Locales*||_scripts/nls/-_||Многоязыковые и национальные формы||
||*JavaPOS Applet*||_appet/jposapplet.jar_||Аппрет представления JavaPOS в JavaScript||
||*JavaPOS library*||_*%jre7%*/lib/ext/-_||Связь контроллеров с драйверами JavaPOS||
||*Device drivers*||_*%jre7%*/lib/ext/-_||Java-драйвера устройств киоска||
||*Template*||_templates_||HTML шаблоны экранных форм||
||*Styles*||_styles_||CSS стили экранных форм||
||*Images*||_images_||Графические изображения||

== Main loader ==

Загружается на начальной странице *index.jsp*

Определяет и настраивает пути проекта, локализацию, используемые библиотеки *Require*, *JQuery*, *Underscore*, *Backbone*, вызывает и инициализирует *Application* и *Routers*.

Системные библиотеки:

  * *Require.js* – динамическая загрузка пакетов JavaScript, HTML-шаблонов и Java-апплетов. Последняя версия и описание здесь: http://requirejs.org/". На русском языке http://requirejs.ru/.
  * *JQuery* – AJAX-библиотека, управление DOM-моделью. Сайт библиотеки http://jquery.com/.
  * *Underscore.js* – инструментарий объектной разработки JavaScript. Последняя версия и описание http://underscorejs.org/. На русском языке href="http://underscorejs.ru/".
  * *Backbone.js* – прототипы структурных объектов *Router*, *View*, *Model*. Последняя версия и описание http://backbonejs.org/. На русском языке http://backbonejs.ru/.

Корневые модули:

  * Application – глобальные значения, на которые ссылаются все другие модули
  * Routers – контроллеры состояний приложения, которые загружают все другие модули

== Application ==

Загружается в модуле *Main*.

Не ссылается ни на какие другие модули, наоборот все модули приложения содержат ссылки на *Application* и поэтому этот объект служит для хранения глобальных для приложения значений, например, ссылки на роутеры, главный экран, заголовки и подвалы страниц.

Модуль *Application* инициирует для всех модулей глобальные события при старте и остановке приложения, а также события смены главной страницы.

== Routers ==

Загружается в модуле *Main*.

Контроллеры состояний приложения загружают и настраивают представления приложения *Views*, связывают формы с моделями данных Models, контроллеры устройств *Devices*. Контроллеров может быть несколько. Цель такого разделения – сохранить небольшой объем для каждого контроллера и позволить параллельно разрабатывать разные логические блоки приложения.

Каждый контроллер содержит таблицу состояний приложения. Например, <code>
routes: {
  ‘start’: ‘start’,
  ‘group/:id/:page’: ‘group’,
  ‘payment/:id/:step: ‘payment’
}
</code>

Таблица отражает соответствие идентификатора состояния (закладка главной страницы, часть url-адреса после символа ‘#’) и функции создания соответствующей формы экрана. Идентификаторы могут содержать переменные составляющие, которые передаются в функцию в качестве параметров.

Разработка ведется таким образом, чтобы приложение при старте корректно открывало любой главный экран по идентификатору состояния. При необходимости последовательность состояний определяется кнопками перехода на форме и полнотой заполнения данных модели, используемой на форме.

Каждый модуль возвращает созданный объект наследника класса *Backbone.Router*.

== Devices ==

Загружаются в контроллерах состояния приложений *Routers*. 

Используют *JavaPOS Applet* для создания контроллеров устройств киоска. Настраивает состояние устройства по событиям старта и остановки приложения *Application*. По события от устройств изменяют состояние приложения, вызывая переход на другой экран, и данные модели *Models*.

Каждый модуль возвращает созданный Java-объект контроллер для соответствующего устройства. Например, *jpos.applet.BillAcceptor* или *jpos.applet.POSPrinter*.

== JavaPOS Applet ==

Апплет загружается при старте приложения и служит прослойкой между JavaPOS-библиотекой и JavaScript. Классы апплета дополняют контроллеры устройств методами, позволяющими вызывать их напрямую из JavaScript. 

Учитываются следующие аспекты такой передачи:

  * Возврат массивов переменных. LiveConnect корректно транслирует массивы JavaScript в Java, но не поддерживает обратную трансляцию. Апплет исправляет этот недостаток, переопределяя функции возвращающие значения в массивах.
  * Передача событий. Для обработки событий в Java используются объекты созданные по заданному интерфейсу. Апплет содержит классы, реализующие все интерфейсы событий JavaPOS и связывающие их непосредственно с вызовом функций JavaScript.

== JavaPOS library ==

Библиотека поддержки стандарта драйверов для POS устройств. Сайт проекта http://javapos.com/. Описание стандарта можно загрузить здесь http://www.nrf-arts.org/content/unifiedpos. На момент написания документа в марте 2003 года вышла версия 1.14 стандарта.

В разработке и поддержке стандарта JavaPOS участвуют производители POS оборудования и программного обеспечения: JCPenny, Sears, Home Depot, NCR, IBM, Sun Microsystems, Epson, Wincor Nixdorf, Fujitsu, Datafit, MGV, Ultimate Technology, RCS, Triversity, 360Commerce, Star Micronics, BearingPoint и TPG.

== Device drivers ==

Часть драйверов JavaPOS устройств киосков было загружено с сайтов производителей. Драйвера устройств, производители которых не поддерживают стандарт JavaPOS, разработаны командой проекта.

_[Добавить перечисление драйверов]_

== Models ==

Модели данных загружаются контроллерами состояний *Routers*, объектами управления устройствами *Devices*. Рекомендую избегать загрузки непосредственно из представлений *Views*. Связь моделей данных с представлениями осуществлять при их создании в контроллере состояний *Routers*.

Модель обеспечивает взаимодействие с Back-end, используя формат объема JSON и протокол  RESTfull.

События изменения данных в модели могут быть инициированы на форме *Views*, по событию контроллера устройств *Devices*, при обмене с Back-end.

Возвращает созданный объект *Backbone.Collection*, содержащий коллекцию данных и ссылку на класс *Backbone.Model*, используемый при создании новых экземпляров данных.

== Views ==

Представления загружаются контроллерами состояния приложений *Routers*. В отличие от других модулей в пакете содержится только описание класса. Контроллер состояния управляет созданием представления.

При создании представления передаются выбранные из коллекции или созданные экземпляры данных, элемент DOM-модели для привязки.

Представления *Views* используют шаблоны *Templates* для заполнения элемента DOM-модели. Дополнительно для многоязыковых форм и учета национальных форматов могут быть использованы NLS-модули.

Рекомендация во избежание создания «фантомных» представлений. Если используется связь с событиями изменения данных, необходимо создать для представления метод close, в котором все установленные связи должны быть удалены. Метод close должен вызываться контроллером состояний *Routers* при замене представления на экране.

Каждый модуль возвращает класс-наследник *Backbone.View*.

== Templates ==

HTML-шаблоны загружаются представлениями *Views*. Шаблоны накладывают на HTML-текст данные формы и NLS-модули.

Синтаксис шаблонов описан в библиотеке *Underscore*.

== Styles ==

Все файлы CSS стилей загружаются на стартовой странице, но используются только в привязке к отдельным элементам *Templates* и *Views*. Так как большинство стилей применяется на всех формах, то целесообразность организации динамической загрузки под сомнением.

== Images ==

При дизайне экранов соблюдается правило, по которому графические изображения описываются только в файлах CSS стилей.

= Архитектура Back-end =

_[Сейчас на этапе proof-of-concept. Будет описана позже]_